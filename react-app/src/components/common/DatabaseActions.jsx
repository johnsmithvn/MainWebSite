// üìÅ src/components/common/DatabaseActions.jsx
// üîÑ Centralized database actions component with loading and confirmations

import React from 'react';
import { FiRefreshCw, FiTrash2, FiRotateCcw, FiImage } from 'react-icons/fi';
import { useAuthStore, useMovieStore, useMusicStore } from '@/store';
import { useModal } from './Modal';
import { 
  getContentTypeFromSourceKey, 
  isValidContentType,
  performDatabaseScan,
  performDatabaseDelete,
  performDatabaseReset,
  performThumbnailExtraction,
  getDatabaseOperationLabels
} from '@/utils/databaseOperations';
import Button from './Button';

const ThumbnailOverwriteToggle = ({
  defaultChecked = false,
  onChange,
}) => {
  const [checked, setChecked] = React.useState(defaultChecked);

  React.useEffect(() => {
    setChecked(defaultChecked);
  }, [defaultChecked]);

  React.useEffect(() => {
    onChange?.(checked);
  }, [checked, onChange]);

  return (
    <label className="flex items-start space-x-3 p-3 border border-purple-200 dark:border-purple-700 rounded-lg bg-purple-50/60 dark:bg-purple-900/20 cursor-pointer">
      <input
        type="checkbox"
        className="mt-1 h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
        checked={checked}
        onChange={(event) => setChecked(event.target.checked)}
      />
      <div className="text-sm text-left">
        <p className="font-semibold text-purple-800 dark:text-purple-100">
          Ghi ƒë√® thumbnail hi·ªán c√≥
        </p>
        <p className="text-xs text-purple-700 dark:text-purple-300">
          Khi b·∫≠t t√πy ch·ªçn n√†y h·ªá th·ªëng s·∫Ω t·∫°o l·∫°i to√†n b·ªô thumbnail ngay c·∫£ khi ƒë√£ t·ªìn t·∫°i.
          N·∫øu t·∫Øt, c√°c thumbnail s·∫µn c√≥ s·∫Ω ƒë∆∞·ª£c gi·ªØ nguy√™n v√† b·ªè qua.
        </p>
      </div>
    </label>
  );
};

const DatabaseActions = ({ 
  contentType = null, // If null, will auto-detect from sourceKey
  sourceKey = null, // If null, will use from auth store
  rootFolder = null, // If null, will use from auth store
  layout = 'vertical', // 'vertical' | 'horizontal' | 'grid'
  size = 'sm', // Button size
  variant = 'outline', // Button variant
  showLabels = true,
  className = ''
}) => {
  const { sourceKey: authSourceKey, rootFolder: authRootFolder } = useAuthStore();
  const { confirmModal, successModal, errorModal, Modal: ModalComponent } = useModal();
  
  // Use provided values or fallback to auth store
  const currentSourceKey = sourceKey || authSourceKey;
  const currentRootFolder = rootFolder || authRootFolder;
  
  // Auto-detect content type if not provided
  const currentContentType = contentType || getContentTypeFromSourceKey(currentSourceKey);

  // Check if operations are valid
  const isValid = isValidContentType(currentContentType, currentSourceKey, currentRootFolder);

  // Get labels for current content type
  const labels = getDatabaseOperationLabels(currentContentType);

  // Current folder path for contextual actions
  const moviePath = useMovieStore((state) => state.currentPath);
  const musicPath = useMusicStore((state) => state.currentPath);
  const overwriteRef = React.useRef(false);
  const currentPath = React.useMemo(() => {
    if (currentContentType === 'movie') return moviePath || '';
    if (currentContentType === 'music') return musicPath || '';
    return '';
  }, [currentContentType, moviePath, musicPath]);
  
  if (!isValid || !currentContentType) {
    return null; // Don't render if invalid
  }
  
  // Handle scan operation
  const handleScan = () => {
    confirmModal({
      title: `üîç ${labels.scan}`,
      message: (
        <div className="text-left space-y-3">
          <p className="font-medium">{labels.scanDescription}</p>
          <div className="bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg">
            <p className="font-semibold text-blue-800 dark:text-blue-200 mb-2">üìã Th√¥ng tin:</p>
            <ul className="text-sm space-y-1 text-blue-700 dark:text-blue-300">
              <li>‚Ä¢ Source: <strong>{currentSourceKey}</strong></li>
              {currentContentType === 'manga' && (
                <li>‚Ä¢ Root: <strong>{currentRootFolder}</strong></li>
              )}
              <li>‚Ä¢ Thao t√°c n√†y s·∫Ω KH√îNG x√≥a d·ªØ li·ªáu hi·ªán c√≥</li>
              <li>‚Ä¢ Ch·ªâ th√™m m·ªõi c√°c folder/file ƒë∆∞·ª£c t√¨m th·∫•y</li>
            </ul>
          </div>
        </div>
      ),
      confirmText: 'üîç B·∫Øt ƒë·∫ßu qu√©t',
      cancelText: 'H·ªßy',
      onConfirm: () => {
        performDatabaseScan(
          currentContentType,
          currentSourceKey,
          currentRootFolder,
          (data, message) => {
            successModal({
              title: '‚úÖ Qu√©t ho√†n t·∫•t!',
              message: `${message}${data.stats?.total ? ` - T√¨m th·∫•y ${data.stats.total} m·ª•c.` : ''}`
            });
          },
          (error) => {
            errorModal({
              title: '‚ùå L·ªói qu√©t',
              message: error
            });
          }
        );
      }
    });
  };

  // Handle thumbnail extraction (movie & music)
  const handleThumbnailExtraction = () => {
    if (!['movie', 'music'].includes(currentContentType)) {
      return;
    }

    const folderLabel = currentPath || 'Th∆∞ m·ª•c g·ªëc (root)';
    overwriteRef.current = false;

    confirmModal({
      title: `üñºÔ∏è ${labels.thumbnail || 'Qu√©t thumbnail'}`,
      message: (
        <div className="text-left space-y-3">
          <p className="font-medium">{labels.thumbnailDescription || 'T·∫°o l·∫°i thumbnail cho th∆∞ m·ª•c hi·ªán t·∫°i.'}</p>
          <div className="bg-purple-50 dark:bg-purple-900/20 p-3 rounded-lg">
            <p className="font-semibold text-purple-800 dark:text-purple-200 mb-2">üìÅ Ph·∫°m vi qu√©t:</p>
            <ul className="text-sm space-y-1 text-purple-700 dark:text-purple-300">
              <li>‚Ä¢ Source: <strong>{currentSourceKey}</strong></li>
              <li>‚Ä¢ Th∆∞ m·ª•c: <strong>{folderLabel}</strong></li>
              <li>
                ‚Ä¢ Bao g·ªìm to√†n b·ªô {currentContentType === 'movie' ? 'video' : 'b√†i h√°t'} v√† th∆∞ m·ª•c con hi·ªán c√≥
              </li>
            </ul>
          </div>
          <ThumbnailOverwriteToggle
            defaultChecked={false}
            onChange={(value) => {
              overwriteRef.current = value;
            }}
          />
          <p className="text-xs text-purple-600 dark:text-purple-300">
            L∆∞u √Ω: thao t√°c c√≥ th·ªÉ m·∫•t v√†i ph√∫t t√πy s·ªë l∆∞·ª£ng file. Vui l√≤ng gi·ªØ ·ª©ng d·ª•ng m·ªü trong khi x·ª≠ l√Ω.
          </p>
        </div>
      ),
      confirmText: 'üñºÔ∏è B·∫Øt ƒë·∫ßu qu√©t thumbnail',
      cancelText: 'H·ªßy',
      onConfirm: () => {
        performThumbnailExtraction(
          currentContentType,
          currentSourceKey,
          { path: currentPath, overwrite: overwriteRef.current },
          (data) => {
            const countInfo = data.count ? `ƒê√£ x·ª≠ l√Ω ${data.count} m·ª•c.` : '';
            const successTitle = labels.thumbnailSuccess || '‚úÖ Ho√†n t·∫•t!';
            const successMessage = [
              labels.thumbnailSuccessDetail || 'ƒê√£ ho√†n t·∫•t qu√©t thumbnail.',
              countInfo
            ]
              .filter(Boolean)
              .join(' ');
            successModal({
              title: successTitle,
              message: successMessage || 'ƒê√£ ho√†n t·∫•t qu√©t thumbnail.',
            });
          },
          (error) => {
            errorModal({
              title: '‚ùå L·ªói qu√©t thumbnail',
              message: error,
            });
          }
        );
      }
    });
  };

  // Handle delete operation
  const handleDelete = () => {
    confirmModal({
      title: `üóëÔ∏è ${labels.delete}`,
      message: (
        <div className="text-left space-y-3">
          <p className="font-medium">{labels.deleteDescription}</p>
          <div className="bg-red-50 dark:bg-red-900/20 p-3 rounded-lg">
            <p className="font-semibold text-red-800 dark:text-red-200 mb-2">üíÄ C·∫£nh b√°o:</p>
            <ul className="text-sm space-y-1 text-red-700 dark:text-red-300">
              <li>‚Ä¢ Source: <strong>{currentSourceKey}</strong></li>
              {currentContentType === 'manga' && (
                <li>‚Ä¢ Root: <strong>{currentRootFolder}</strong></li>
              )}
              <li>‚Ä¢ T·∫•t c·∫£ d·ªØ li·ªáu database s·∫Ω b·ªã x√≥a</li>
              <li>‚Ä¢ L∆∞·ª£t xem v√† th·ªëng k√™ s·∫Ω b·ªã m·∫•t</li>
              <li>‚Ä¢ File th·ª±c t·∫ø s·∫Ω KH√îNG b·ªã ·∫£nh h∆∞·ªüng</li>
            </ul>
          </div>
          <div className="bg-red-100 dark:bg-red-900/30 p-3 rounded-lg border border-red-300 dark:border-red-700">
            <p className="font-bold text-red-800 dark:text-red-200">
              ‚ùå H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!
            </p>
          </div>
        </div>
      ),
      confirmText: 'üóëÔ∏è X√≥a Database',
      cancelText: 'H·ªßy',
      onConfirm: () => {
        performDatabaseDelete(
          currentContentType,
          currentSourceKey,
          currentRootFolder,
          (data, message) => {
            successModal({
              title: '‚úÖ X√≥a ho√†n t·∫•t!',
              message: message
            });
          },
          (error) => {
            errorModal({
              title: '‚ùå L·ªói x√≥a',
              message: error
            });
          }
        );
      }
    });
  };
  
  // Handle reset operation
  const handleReset = () => {
    confirmModal({
      title: `üîÑ ${labels.reset}`,
      message: (
        <div className="text-left space-y-3">
          <p className="font-medium">{labels.resetDescription}</p>
          <div className="bg-yellow-50 dark:bg-yellow-900/20 p-3 rounded-lg">
            <p className="font-semibold text-yellow-800 dark:text-yellow-200 mb-2">üîÑ Thao t√°c:</p>
            <ul className="text-sm space-y-1 text-yellow-700 dark:text-yellow-300">
              <li>‚Ä¢ Source: <strong>{currentSourceKey}</strong></li>
              {currentContentType === 'manga' && (
                <li>‚Ä¢ Root: <strong>{currentRootFolder}</strong></li>
              )}
              <li>‚Ä¢ 1. X√≥a t·∫•t c·∫£ d·ªØ li·ªáu database hi·ªán c√≥</li>
              <li>‚Ä¢ 2. Qu√©t l·∫°i v√† t·∫°o database m·ªõi</li>
              <li>‚Ä¢ 3. T·∫•t c·∫£ l∆∞·ª£t xem s·∫Ω v·ªÅ 0</li>
            </ul>
          </div>
          <div className="bg-yellow-100 dark:bg-yellow-900/30 p-3 rounded-lg border border-yellow-300 dark:border-yellow-700">
            <p className="font-bold text-yellow-800 dark:text-yellow-200">
              ‚ö†Ô∏è T·∫•t c·∫£ th·ªëng k√™ v√† l∆∞·ª£t xem s·∫Ω b·ªã reset!
            </p>
          </div>
        </div>
      ),
      confirmText: 'üîÑ Reset & Qu√©t',
      cancelText: 'H·ªßy',
      onConfirm: () => {
        performDatabaseReset(
          currentContentType,
          currentSourceKey,
          currentRootFolder,
          (data, message) => {
            successModal({
              title: '‚úÖ Reset ho√†n t·∫•t!',
              message: message
            });
          },
          (error) => {
            errorModal({
              title: '‚ùå L·ªói reset',
              message: error
            });
          }
        );
      }
    });
  };
  
  // Button configurations
  const buttons = [];

  if (['movie', 'music'].includes(currentContentType) && labels.thumbnail) {
    buttons.push({
      key: 'thumbnail',
      icon: FiImage,
      label: showLabels ? labels.thumbnail : '',
      onClick: handleThumbnailExtraction,
      className: 'text-purple-600 hover:text-purple-700 border-purple-300 hover:border-purple-400'
    });
  }

  buttons.push(
    {
      key: 'scan',
      icon: FiRefreshCw,
      label: showLabels ? labels.scan : '',
      onClick: handleScan,
      className: 'text-blue-600 hover:text-blue-700 border-blue-300 hover:border-blue-400'
    },
    {
      key: 'delete',
      icon: FiTrash2,
      label: showLabels ? labels.delete : '',
      onClick: handleDelete,
      className: 'text-red-600 hover:text-red-700 border-red-300 hover:border-red-400'
    },
    {
      key: 'reset',
      icon: FiRotateCcw,
      label: showLabels ? labels.reset : '',
      onClick: handleReset,
      className: 'text-yellow-600 hover:text-yellow-700 border-yellow-300 hover:border-yellow-400'
    }
  );
  
  // Layout classes
  const layoutClasses = {
    vertical: 'flex flex-col space-y-2',
    horizontal: 'flex flex-row space-x-2',
    grid: 'grid grid-cols-1 sm:grid-cols-3 gap-2'
  };
  
  return (
    <div className={`${layoutClasses[layout]} ${className}`}>
      {buttons.map(({ key, icon: Icon, label, onClick, className: buttonClassName }) => (
        <Button
          key={key}
          variant={variant}
          size={size}
          onClick={onClick}
          icon={Icon}
          className={`${buttonClassName} justify-start`}
        >
          {label}
        </Button>
      ))}
      
      {/* Modal Component */}
      <ModalComponent />
    </div>
  );
};

export default DatabaseActions;
