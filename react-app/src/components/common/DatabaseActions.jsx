// üìÅ src/components/common/DatabaseActions.jsx
// üîÑ Centralized database actions component with loading and confirmations

import React from 'react';
import { FiRefreshCw, FiTrash2, FiRotateCcw } from 'react-icons/fi';
import { useAuthStore } from '@/store';
import { useModal } from './Modal';
import { 
  getContentTypeFromSourceKey, 
  isValidContentType,
  performDatabaseScan,
  performDatabaseDelete,
  performDatabaseReset,
  getDatabaseOperationLabels
} from '@/utils/databaseOperations';
import Button from './Button';

const DatabaseActions = ({ 
  contentType = null, // If null, will auto-detect from sourceKey
  sourceKey = null, // If null, will use from auth store
  rootFolder = null, // If null, will use from auth store
  layout = 'vertical', // 'vertical' | 'horizontal' | 'grid'
  size = 'sm', // Button size
  variant = 'outline', // Button variant
  showLabels = true,
  className = ''
}) => {
  const { sourceKey: authSourceKey, rootFolder: authRootFolder } = useAuthStore();
  const { confirmModal, successModal, errorModal, Modal: ModalComponent } = useModal();
  
  // Use provided values or fallback to auth store
  const currentSourceKey = sourceKey || authSourceKey;
  const currentRootFolder = rootFolder || authRootFolder;
  
  // Auto-detect content type if not provided
  const currentContentType = contentType || getContentTypeFromSourceKey(currentSourceKey);
  
  // Check if operations are valid
  const isValid = isValidContentType(currentContentType, currentSourceKey, currentRootFolder);
  
  // Get labels for current content type
  const labels = getDatabaseOperationLabels(currentContentType);
  
  if (!isValid || !currentContentType) {
    return null; // Don't render if invalid
  }
  
  // Handle scan operation
  const handleScan = async () => {
    const confirmed = await confirmModal(
      `üîç ${labels.scan}`,
      <div className="text-left space-y-3">
        <p className="font-medium">{labels.scanDescription}</p>
        <div className="bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg">
          <p className="font-semibold text-blue-800 dark:text-blue-200 mb-2">üìã Th√¥ng tin:</p>
          <ul className="text-sm space-y-1 text-blue-700 dark:text-blue-300">
            <li>‚Ä¢ Source: <strong>{currentSourceKey}</strong></li>
            {currentContentType === 'manga' && (
              <li>‚Ä¢ Root: <strong>{currentRootFolder}</strong></li>
            )}
            <li>‚Ä¢ Thao t√°c n√†y s·∫Ω KH√îNG x√≥a d·ªØ li·ªáu hi·ªán c√≥</li>
            <li>‚Ä¢ Ch·ªâ th√™m m·ªõi c√°c folder/file ƒë∆∞·ª£c t√¨m th·∫•y</li>
          </ul>
        </div>
      </div>,
      'confirm'
    );
    
    if (confirmed) {
      performDatabaseScan(
        currentContentType,
        currentSourceKey,
        currentRootFolder,
        (data, message) => {
          successModal({
            title: '‚úÖ Qu√©t ho√†n t·∫•t!',
            message: `${message}${data.stats?.total ? ` - T√¨m th·∫•y ${data.stats.total} m·ª•c.` : ''}`
          });
        },
        (error) => {
          errorModal({
            title: '‚ùå L·ªói qu√©t',
            message: error
          });
        }
      );
    }
  };
  
  // Handle delete operation
  const handleDelete = async () => {
    const confirmed = await confirmModal(
      `üóëÔ∏è ${labels.delete}`,
      <div className="text-left space-y-3">
        <p className="font-medium">{labels.deleteDescription}</p>
        <div className="bg-red-50 dark:bg-red-900/20 p-3 rounded-lg">
          <p className="font-semibold text-red-800 dark:text-red-200 mb-2">üíÄ C·∫£nh b√°o:</p>
          <ul className="text-sm space-y-1 text-red-700 dark:text-red-300">
            <li>‚Ä¢ Source: <strong>{currentSourceKey}</strong></li>
            {currentContentType === 'manga' && (
              <li>‚Ä¢ Root: <strong>{currentRootFolder}</strong></li>
            )}
            <li>‚Ä¢ T·∫•t c·∫£ d·ªØ li·ªáu database s·∫Ω b·ªã x√≥a</li>
            <li>‚Ä¢ L∆∞·ª£t xem v√† th·ªëng k√™ s·∫Ω b·ªã m·∫•t</li>
            <li>‚Ä¢ File th·ª±c t·∫ø s·∫Ω KH√îNG b·ªã ·∫£nh h∆∞·ªüng</li>
          </ul>
        </div>
        <div className="bg-red-100 dark:bg-red-900/30 p-3 rounded-lg border border-red-300 dark:border-red-700">
          <p className="font-bold text-red-800 dark:text-red-200">
            ‚ùå H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!
          </p>
        </div>
      </div>,
      'confirm'
    );
    
    if (confirmed) {
      performDatabaseDelete(
        currentContentType,
        currentSourceKey,
        currentRootFolder,
        (data, message) => {
          successModal({
            title: '‚úÖ X√≥a ho√†n t·∫•t!',
            message: message
          });
        },
        (error) => {
          errorModal({
            title: '‚ùå L·ªói x√≥a',
            message: error
          });
        }
      );
    }
  };
  
  // Handle reset operation
  const handleReset = async () => {
    const confirmed = await confirmModal(
      `üîÑ ${labels.reset}`,
      <div className="text-left space-y-3">
        <p className="font-medium">{labels.resetDescription}</p>
        <div className="bg-yellow-50 dark:bg-yellow-900/20 p-3 rounded-lg">
          <p className="font-semibold text-yellow-800 dark:text-yellow-200 mb-2">üîÑ Thao t√°c:</p>
          <ul className="text-sm space-y-1 text-yellow-700 dark:text-yellow-300">
            <li>‚Ä¢ Source: <strong>{currentSourceKey}</strong></li>
            {currentContentType === 'manga' && (
              <li>‚Ä¢ Root: <strong>{currentRootFolder}</strong></li>
            )}
            <li>‚Ä¢ 1. X√≥a t·∫•t c·∫£ d·ªØ li·ªáu database hi·ªán c√≥</li>
            <li>‚Ä¢ 2. Qu√©t l·∫°i v√† t·∫°o database m·ªõi</li>
            <li>‚Ä¢ 3. T·∫•t c·∫£ l∆∞·ª£t xem s·∫Ω v·ªÅ 0</li>
          </ul>
        </div>
        <div className="bg-yellow-100 dark:bg-yellow-900/30 p-3 rounded-lg border border-yellow-300 dark:border-yellow-700">
          <p className="font-bold text-yellow-800 dark:text-yellow-200">
            ‚ö†Ô∏è T·∫•t c·∫£ th·ªëng k√™ v√† l∆∞·ª£t xem s·∫Ω b·ªã reset!
          </p>
        </div>
      </div>,
      'confirm'
    );
    
    if (confirmed) {
      performDatabaseReset(
        currentContentType,
        currentSourceKey,
        currentRootFolder,
        (data, message) => {
          successModal({
            title: '‚úÖ Reset ho√†n t·∫•t!',
            message: message
          });
        },
        (error) => {
          errorModal({
            title: '‚ùå L·ªói reset',
            message: error
          });
        }
      );
    }
  };
  
  // Button configurations
  const buttons = [
    {
      key: 'scan',
      icon: FiRefreshCw,
      label: showLabels ? labels.scan : '',
      onClick: handleScan,
      className: 'text-blue-600 hover:text-blue-700 border-blue-300 hover:border-blue-400'
    },
    {
      key: 'delete',
      icon: FiTrash2,
      label: showLabels ? labels.delete : '',
      onClick: handleDelete,
      className: 'text-red-600 hover:text-red-700 border-red-300 hover:border-red-400'
    },
    {
      key: 'reset',
      icon: FiRotateCcw,
      label: showLabels ? labels.reset : '',
      onClick: handleReset,
      className: 'text-yellow-600 hover:text-yellow-700 border-yellow-300 hover:border-yellow-400'
    }
  ];
  
  // Layout classes
  const layoutClasses = {
    vertical: 'flex flex-col space-y-2',
    horizontal: 'flex flex-row space-x-2',
    grid: 'grid grid-cols-1 sm:grid-cols-3 gap-2'
  };
  
  return (
    <div className={`${layoutClasses[layout]} ${className}`}>
      {buttons.map(({ key, icon: Icon, label, onClick, className: buttonClassName }) => (
        <Button
          key={key}
          variant={variant}
          size={size}
          onClick={onClick}
          icon={Icon}
          className={`${buttonClassName} justify-start`}
        >
          {label}
        </Button>
      ))}
      
      {/* Modal Component */}
      <ModalComponent />
    </div>
  );
};

export default DatabaseActions;
