/**
 * Browser Support Utilities
 * Ki·ªÉm tra t√≠nh nƒÉng c√≥ s·∫µn trong browser hi·ªán t·∫°i
 */

/**
 * Ki·ªÉm tra Caches API c√≥ ƒë∆∞·ª£c h·ªó tr·ª£ kh√¥ng
 * @returns {boolean} true n·∫øu Caches API c√≥ s·∫µn
 */
export function isCachesAPISupported() {
  return 'caches' in window && typeof caches !== 'undefined';
}

/**
 * Ki·ªÉm tra Service Worker c√≥ ƒë∆∞·ª£c h·ªó tr·ª£ kh√¥ng
 * @returns {boolean} true n·∫øu Service Worker c√≥ s·∫µn
 */
export function isServiceWorkerSupported() {
  return 'serviceWorker' in navigator;
}

/**
 * Ki·ªÉm tra IndexedDB c√≥ ƒë∆∞·ª£c h·ªó tr·ª£ kh√¥ng
 * @returns {boolean} true n·∫øu IndexedDB c√≥ s·∫µn
 */
export function isIndexedDBSupported() {
  return 'indexedDB' in window && typeof indexedDB !== 'undefined';
}

/**
 * Ki·ªÉm tra Storage API c√≥ ƒë∆∞·ª£c h·ªó tr·ª£ kh√¥ng (ƒë·ªÉ check quota)
 * @returns {boolean} true n·∫øu Storage API c√≥ s·∫µn
 */
export function isStorageAPISupported() {
  return 'storage' in navigator && 'estimate' in navigator.storage;
}

/**
 * Ki·ªÉm tra m√¥i tr∆∞·ªùng c√≥ an to√†n cho PWA features kh√¥ng
 * PWA features y√™u c·∫ßu HTTPS ho·∫∑c localhost
 * @returns {boolean} true n·∫øu m√¥i tr∆∞·ªùng an to√†n
 */
export function isSecureContext() {
  return window.isSecureContext || window.location.protocol === 'https:' || 
         window.location.hostname === 'localhost' || 
         window.location.hostname === '127.0.0.1';
}

/**
 * Ki·ªÉm tra t·∫•t c·∫£ c√°c t√≠nh nƒÉng offline c√≥ s·∫µn kh√¥ng
 * @returns {object} Object ch·ª©a th√¥ng tin support
 */
export function getOfflineSupport() {
  const secureContext = isSecureContext();
  
  return {
    isSupported: secureContext && isCachesAPISupported() && isIndexedDBSupported(),
    details: {
      secureContext,
      cachesAPI: isCachesAPISupported(),
      serviceWorker: isServiceWorkerSupported(),
      indexedDB: isIndexedDBSupported(),
      storageAPI: isStorageAPISupported()
    }
  };
}

/**
 * T·∫°o th√¥ng b√°o l·ªói th√¢n thi·ªán cho user khi t√≠nh nƒÉng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£
 * @param {string} feature - T√™n t√≠nh nƒÉng
 * @returns {string} Th√¥ng b√°o l·ªói
 */
export function getUnsupportedMessage(feature = 'offline features') {
  const support = getOfflineSupport();
  
  if (!support.details.secureContext) {
    return `${feature} y√™u c·∫ßu HTTPS ho·∫∑c localhost. Hi·ªán t·∫°i b·∫°n ƒëang truy c·∫≠p qua HTTP kh√¥ng an to√†n.`;
  }
  
  if (!support.details.cachesAPI) {
    return `${feature} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ trong browser n√†y. Vui l√≤ng c·∫≠p nh·∫≠t browser ho·∫∑c s·ª≠ d·ª•ng Chrome/Firefox.`;
  }
  
  if (!support.details.indexedDB) {
    return `${feature} y√™u c·∫ßu IndexedDB nh∆∞ng kh√¥ng c√≥ s·∫µn. Ki·ªÉm tra c√†i ƒë·∫∑t browser.`;
  }
  
  return `${feature} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ trong m√¥i tr∆∞·ªùng n√†y.`;
}

/**
 * Console log th√¥ng tin browser support ƒë·ªÉ debug
 */
export function logBrowserSupport() {
  const support = getOfflineSupport();
  
  console.group('üîç Browser Support Analysis');
  console.log('Overall offline support:', support.isSupported ? '‚úÖ Supported' : '‚ùå Not supported');
  console.log('Secure context (HTTPS/localhost):', support.details.secureContext ? '‚úÖ' : '‚ùå');
  console.log('Caches API:', support.details.cachesAPI ? '‚úÖ' : '‚ùå');
  console.log('Service Worker:', support.details.serviceWorker ? '‚úÖ' : '‚ùå');
  console.log('IndexedDB:', support.details.indexedDB ? '‚úÖ' : '‚ùå');
  console.log('Storage API (quota):', support.details.storageAPI ? '‚úÖ' : '‚ùå');
  console.log('Current URL:', window.location.href);
  console.log('User Agent:', navigator.userAgent);
  console.groupEnd();
  
  if (!support.isSupported) {
    console.warn('‚ö†Ô∏è Offline features not fully supported:', getUnsupportedMessage());
  }
  
  return support;
}

/**
 * T·∫°o fallback cho functions khi Caches API kh√¥ng c√≥
 * @param {Function} cachesFunction - Function s·ª≠ d·ª•ng Caches API
 * @param {Function} fallbackFunction - Function thay th·∫ø
 * @returns {Function} Function an to√†n
 */
export function createCachesFallback(cachesFunction, fallbackFunction) {
  return async (...args) => {
    if (isCachesAPISupported()) {
      return await cachesFunction(...args);
    } else {
      console.warn('‚ö†Ô∏è Caches API not available, using fallback');
      return await fallbackFunction(...args);
    }
  };
}
