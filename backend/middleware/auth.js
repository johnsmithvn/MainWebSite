const dns = require("dns").promises;
const dotenv = require("dotenv");
const path = require("path");
const fs = require("fs");

// ƒê·ªçc bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
const envPath = path.join(__dirname, "../.env");
const parsedEnv = dotenv.parse(fs.readFileSync(envPath, "utf-8"));

// L·∫•y danh s√°ch hostname v√† IP ƒë∆∞·ª£c ph√©p t·ª´ .env
const allowedHostnames = (parsedEnv.ALLOWED_HOSTNAMES || "").split(",").map(s => s.trim()).filter(Boolean);
const allowedIPs = (parsedEnv.ALLOWED_IPS || "").split(",").map(s => s.trim()).filter(Boolean);

// H√†m ki·ªÉm tra IP n·ªôi b·ªô ho·∫∑c localhost
function isAllowedClient(clientIP) {
  return true; // B·ªè comment n·∫øu mu·ªën cho ph√©p to√†n b·ªô n·ªôi b·ªô
  // return allowedIPs.includes(clientIP);
  
}

// Middleware ki·ªÉm tra IP/hostname
module.exports = async function (req, res, next) {
  let clientIP = req.headers["x-forwarded-for"] || req.connection.remoteAddress;
  if (clientIP.startsWith("::ffff:")) {
    clientIP = clientIP.replace("::ffff:", "");
  }

  // üõ°Ô∏è Cho ph√©p IP n·ªôi b·ªô
  if (isAllowedClient(clientIP)) {
    return next();
  }

  // ‚úÖ N·∫øu kh√¥ng ph·∫£i LAN ‚Üí ki·ªÉm tra hostname Tailscale
  try {
    const resolved = await dns.reverse(clientIP);
    const hostname = resolved[0] || "";
    if (!allowedHostnames.includes(hostname)) {
      console.warn("‚ùå Truy c·∫≠p b·ªã ch·∫∑n t·ª´ hostname:", hostname);
      return res.status(403).send("Forbidden (blocked)");
    }
    next();
  } catch (err) {
    console.error("‚ùå Reverse DNS failed:", err.message);
    return res.status(403).send("Forbidden (lookup failed)");
  }
}; 