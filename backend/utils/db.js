// üìÅ backend/utils/db.js
const path = require("path");
const fs = require("fs");
const Database = require("better-sqlite3");

const DB_DIR = path.join(__dirname, "../data");
if (!fs.existsSync(DB_DIR)) fs.mkdirSync(DB_DIR);

// ‚úÖ map: rootKey => DB instance
const dbMap = {};

/**
 * ‚úÖ T·∫°o DB n·∫øu ch∆∞a t·ªìn t·∫°i
 * @param {string} dbkey  ƒë√¢y laÃÄ key cuÃâa environment
 * @returns {Database} SQLite instance
 */
// ‚úÖ T·∫°o b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i
// folders: cache to√†n b·ªô folder c√≥ thumbnail
// views: l∆∞u l∆∞·ª£t xem
// ‚ûï th√™m c·ªôt root ƒë·ªÉ ph√¢n bi·ªát folder t·ª´ root n√†o

function getDB(dbkey) {
  if (dbMap[dbkey]) return dbMap[dbkey];

  const safeName = dbkey.replace(/[^a-zA-Z0-9_-]/g, "_"); // ch·ªëng path l·ªói
  const dbPath = path.join(DB_DIR, `${safeName}.db`);

  const db = new Database(dbPath);
  db.exec(`
    CREATE TABLE IF NOT EXISTS folders (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      root TEXT NOT NULL,
      name TEXT NOT NULL,
      path TEXT NOT NULL,
      thumbnail TEXT,
      lastModified INTEGER,
      imageCount INTEGER DEFAULT 0,
      chapterCount INTEGER DEFAULT 0,
      type TEXT DEFAULT 'folder',
      createdAt INTEGER,
      updatedAt INTEGER,
      isFavorite INTEGER DEFAULT 0

    );

    CREATE INDEX IF NOT EXISTS idx_folders_root_path ON folders(root, path);

    CREATE TABLE IF NOT EXISTS views (
    root TEXT NOT NULL,
    path TEXT NOT NULL,
    count INTEGER DEFAULT 1,
    PRIMARY KEY (root, path)
    );
    CREATE INDEX IF NOT EXISTS idx_folders_favorite ON folders(root, isFavorite);
  `);

  dbMap[dbkey] = db;
  return db;
}

// Movie: D√πng getMovieDB
const dbMovieMap = {};
function getMovieDB(dbkey) {
  if (dbMovieMap[dbkey]) return dbMovieMap[dbkey];
  const safeName = dbkey.replace(/[^a-zA-Z0-9_-]/g, "_");
  const dbPath = path.join(DB_DIR, `${safeName}.db`);
  const db = new Database(dbPath);

  // T·∫°o b·∫£ng n·∫øu ch∆∞a c√≥
  db.exec(`
    CREATE TABLE IF NOT EXISTS folders (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      path TEXT NOT NULL,
      thumbnail TEXT,
      type TEXT DEFAULT 'folder',
      createdAt INTEGER,
      updatedAt INTEGER,
      isFavorite INTEGER DEFAULT 0,
      viewCount INTEGER DEFAULT 0
    );
    CREATE INDEX IF NOT EXISTS idx_folders_path ON folders(path);
    CREATE INDEX IF NOT EXISTS idx_folders_favorite ON folders(isFavorite);
  `);

  // ‚úÖ Ki·ªÉm tra & th√™m c·ªôt n·∫øu thi·∫øu
  const existingCols = db
    .prepare(`PRAGMA table_info(folders)`)
    .all()
    .map((c) => c.name);

  if (!existingCols.includes("size")) {
    db.prepare(`ALTER TABLE folders ADD COLUMN size INTEGER DEFAULT 0`).run();
  }
  if (!existingCols.includes("modified")) {
    db.prepare(`ALTER TABLE folders ADD COLUMN modified INTEGER`).run();
  }
  if (!existingCols.includes("duration")) {
    db.prepare(`ALTER TABLE folders ADD COLUMN duration INTEGER`).run();
  }

  dbMovieMap[dbkey] = db;
  return db;
}
function getMusicDB(dbkey) {
  if (dbMap[dbkey]) return dbMap[dbkey];

  const safeName = dbkey.replace(/[^a-zA-Z0-9_-]/g, "_");
  const dbPath = path.join(DB_DIR, `${safeName}.db`);
  const db = new Database(dbPath);

  db.exec(`
    -- üìÅ folders: gi·ªëng movie, l∆∞u c·∫£ folder v√† b√†i h√°t
    CREATE TABLE IF NOT EXISTS folders (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      path TEXT NOT NULL,
      thumbnail TEXT,
      type TEXT DEFAULT 'folder', -- 'folder' | 'audio'
      size INTEGER DEFAULT 0,
      modified INTEGER,
      duration INTEGER, -- gi√¢y
      isFavorite INTEGER DEFAULT 0,
      viewCount INTEGER DEFAULT 0,
      createdAt INTEGER,
      updatedAt INTEGER
    );

    CREATE INDEX IF NOT EXISTS idx_folders_path ON folders(path);
    CREATE INDEX IF NOT EXISTS idx_folders_favorite ON folders(isFavorite);

    -- üéµ songs: metadata chi ti·∫øt (lyrics, artist, album,...)
    CREATE TABLE IF NOT EXISTS songs (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      path TEXT NOT NULL UNIQUE, -- match v·ªõi folders.path
      artist TEXT,
      album TEXT,
      genre TEXT,
      lyrics TEXT
    );

    -- üìà views
    CREATE TABLE IF NOT EXISTS views (
      path TEXT PRIMARY KEY,
      count INTEGER DEFAULT 1
    );

    -- üé∂ playlists
    CREATE TABLE IF NOT EXISTS playlists (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      description TEXT,
      createdAt INTEGER,
      updatedAt INTEGER
    );

    -- üîó playlist_items: n·ªëi playlist ‚Üî b√†i h√°t
    CREATE TABLE IF NOT EXISTS playlist_items (
      playlistId INTEGER NOT NULL,
      songPath TEXT NOT NULL,
      sortOrder INTEGER DEFAULT 0,
      PRIMARY KEY (playlistId, songPath)
    );
  `);

  dbMap[dbkey] = db;
  return db;
}

module.exports = { getDB, getMovieDB, getMusicDB };
